package info.sjd;

import java.util.logging.Logger;
import info.sjd.Get_SHA512;
/**
 * 
 * @author Vitaliy
 * 
 *
DATA INPUT/OUTPUT

Create class for data saving process about server connection with the following fields:
time (current system time), session and IP. 

Create list of 10 instances of this class through implementation of log recordings
—оздать список из 10 экземпл€ров этого класса через реализацию записи логов

Fields are to be generated by your own, better to implement own randomizer for values range. 
ѕол€ генерируем сами, лучше написать свой рандомайзер дл€ диапазона значений.

Record data from the list into TXT file in LOG folder inside of the project.
«аписать данные из списка в txt файл в папку log внутри проекта.

Previous records in the file must be preserved.
ѕредыдущие записи в файле должны быть сохранены.

As a result file has to contain such data:

1529666255304 123456789 128.158.234.15
1529666289304 123456799 123.148.214.19
Е
First column is time in milliseconds,
Second - session (random 9-digits number),
Third - IP (also is created by randomly). 
√де перва€ колонка Ц врем€ в миллисекундах,
втора€ Ц сесси€ (рандомное дев€тизначное число),
треть€ Ц IP (тоже создаетс€ рандомно)


Implement logs recording
—оздать реализацию записи логов

Implement logs of connections reading from this file for some period 
—оздать реализацию считывани€ логов подключени€ из этого файла за период

Implement logs deleting from files after 3 days.
—оздать реализацию удалени€ логов из файлов старше 3-х дней

 */


public class AppRunner {
	
	/** Get current time in milliseconds.*/
	public static long curTime() {
		return System.currentTimeMillis();
	}
	
	
	/** Get random 9-digits DEC number.*/
	public static int random9dec() {
		
		long cur_time = curTime();
			
		
		/* Get SHA-512 HASH with SALT.*/
		String cur_time_string = Long.toString(cur_time);
		String salt = cur_time_string.substring(0, 12);
		String hash = Get_SHA512.get_SHA_512_SecurePassword(cur_time_string, salt);
		
		/* Cast HASH to INT after trimming to 9 digits.*/
		int k = cur_time_string.charAt(cur_time_string.length()-1)-'0';
		int res = (int)Long.parseLong(hash.substring(k, k+9),16) % 1000000000;
		
		/*Remove sign at the highest rank.*/
		return res & 0x1FFFFFFF;

	}
	
	/** Get random 254 DEC number.*/
	public static int random254dec() {
		
		long cur_time = curTime();
			
		
		/* Get SHA-512 HASH with SALT.*/
		String cur_time_string = Long.toString(cur_time);
		String salt = cur_time_string.substring(0, 12);
		String hash = Get_SHA512.get_SHA_512_SecurePassword(cur_time_string, salt);
		
		/* Cast HASH to INT after trimming to 254.*/
		int k = cur_time_string.charAt(cur_time_string.length()-1)-'0';
		int res = (int)Long.parseLong(hash.substring(k, k+9),16) % 254;
		
		/*Remove sign at the highest rank.*/
		return res & 0xEF;
	}
	
	
	
	
/*MAIN****************************************/
	public static void main(String[] args) {
		
		Logger logger = Logger.getLogger(AppRunner.class.getName());
		
		 
		
		//Time in ms
		logger.info("MAIN - TIME " + curTime());
		
		//Session
		logger.info("MAIN - SESSION " + random9dec());	
		
		//IP
		String IP = Integer.toString(random254dec())+"."+
					Integer.toString(random254dec())+"."+
					Integer.toString(random254dec())+"."+
					Integer.toString(random254dec()); 
		logger.info("MAIN - IP " + IP);	
		
		
		
		
		
		

	}
	
	
	
	
	/* GARBAGE
	 * 
	 * To be deleted later.
	 * 
	 * */
	
	//logger.info("SHA_time " + cur_time);
	//logger.info("SHA " + k);
	//Logger logger = Logger.getLogger(AppRunner.class.getName());
	//int res_dec = 0;
}
