package info.sjd;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import info.sjd.Get_SHA512;
import info.sjd.LogRec;

/**
 * 
 * @author Vitaliy-tyma
 * 
 *
 *         DATA INPUT/OUTPUT
 * 
 *         DONE Create class for data saving process about server connection
 *         with the following fields: time (current system time), session and
 *         IP.
 * 
 *         DONE Create list of 10 instances of this class through implementation
 *         of log recordings //—оздать список из 10 экземпл€ров этого класса
 *         через реализацию записи логов
 * 
 *         DONE Fields are to be generated by your own, better to implement own
 *         randomizer for values range. //ѕол€ генерируем сами, лучше написать
 *         свой рандомайзер дл€ диапазона значений.
 * 
 *         DONE Record data from the list into TXT file in LOG folder inside of
 *         the project. //«аписать данные из списка в txt файл в папку log
 *         внутри проекта.
 * 
 *         DONE Previous records in the file must be preserved. //ѕредыдущие
 *         записи в файле должны быть сохранены.
 * 
 *         DONE As a result file has to contain such data: 1529666255304
 *         123456789 128.158.234.15 1529666289304 123456799 123.148.214.19 Е
 *         First column is time in milliseconds, Second - session (random
 *         9-digits number), Third - IP (also is created by randomly). //√де
 *         перва€ колонка Ц врем€ в миллисекундах, //втора€ Ц сесси€ (рандомное
 *         дев€тизначное число), //треть€ Ц IP (тоже создаетс€ рандомно)
 * 
 * 
 *         DONE Implement logs recording //—оздать реализацию записи логов
 * 
 *         DONE Implement connections logs reading from this file for some
 *         period //—оздать реализацию считывани€ логов подключени€ из этого
 *         файла за период
 * 
 *         DONE Implement logs deleting from files older then 3 days. //—оздать
 *         реализацию удалени€ логов из файлов старше 3-х дней
 * 
 */

public class AppRunner {

	/* MAIN ****************************************/
	public static void main(String[] args) {

		/** INITIALISATION */
		final String DIR_NAME = "log/";
		final String FILE_NAME = DIR_NAME + "task08.txt";
		Logger logger = Logger.getLogger(AppRunner.class.getName());
		
		
		
		
		/*****************************************************
		 * CHOOSE WORK MODE * 1 - Append file. 2 - Read file to logger. 3 - Delete old
		 * records (3 days).
		 ****************************************************/
		final int MODE = 2;
		/****************************************************/

		
		
		
		
		
		/** WORK ACCORDING TO MODE 1-2-3 */
		switch (MODE) {

		/** Save logs to file. */
		case 1: {
			logger.info("MODE 1 = APPEND FILE.");
			/** GET SEED */
			int seed = (int) Get_SHA512.curTime();

			/** Create list of 10 Strings. */
			List<LogRec> log_rec_10 = new ArrayList<LogRec>(10);

			for (int i = 0; i < 10; i++) {
				LogRec log_rec = new LogRec(Get_SHA512.curTime(), Get_SHA512.randomSession9dec(seed + i),
						Get_SHA512.randomIPhex(seed + i));
				log_rec_10.add(log_rec);
			}


			if (FileAccess.saveToFile(FILE_NAME, log_rec_10, true)) {
				logger.info("MAIN: FILE HAS BEEN SAVED.");
			} else {
				logger.info("MAIN: FILE HAS NOT BEEN SAVED.");
			}
			break;
		}

		/** Read logs from file. Print logs to the logger. */
		case 2: {
			logger.info("MODE 2 = READ FILE.");

			List<String> lines = FileAccess.readFromFile(FILE_NAME);
			for (String line : lines) {
				logger.info(line);
			}
			break;
		}

		/** Delete 3 days older records from the log-file. */
		case 3: {
			logger.info("MODE 3 = DELETE OLD.");

			long curr_time = Get_SHA512.curTime();
			long three_days_ago = curr_time - 3 * 24 * 60 * 60 * 100;

			List<LogRec> new_lines = new ArrayList<LogRec>();

			List<String> lines = FileAccess.readFromFile(FILE_NAME);
			for (String line : lines) {
				String[] words = line.split(" ");

				/** Compare if the line timestamp younger then three days. */
				if (Long.parseLong(words[0]) > three_days_ago) {
					LogRec log_rec = new LogRec(line);
					new_lines.add(log_rec);
				}
			}
			/** Save logs to the new file. */
			if (FileAccess.saveToFile(FILE_NAME, new_lines, false)) {
				logger.info("MAIN: NEW FILE HAS BEEN SAVED.");
			} else {
				logger.info("MAIN: NEW FILE HAS NOT BEEN SAVED.");
			}
			break;
		}
		}

	}

}